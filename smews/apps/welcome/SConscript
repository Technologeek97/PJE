# Copyright or c or Copr. 2008, Simon Duquennoy
# 
# Author e-mail: simon.duquennoy@lifl.fr
# 
# This software is a computer program whose purpose is to design an
# efficient Web server for very-constrained embedded system.
# 
# This software is governed by the CeCILL license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license and that you accept its terms.

import os
import glob

Import('env \
genDir \
dirsMap \
tmpBase \
target \
sconsBasePath \
httpCodesDir \
appBase \
')

# used by getAppFiles
def getAppFilesRec(appPath,path):
	files=[]
	for file in glob.glob(path + '/*'):
       		if os.path.isdir(file):
			files = files + (getAppFilesRec(appPath,file))
       		else:
			files.append(file[len(appPath)+1:])
	return files

# returns all files contained in path (with recurssion)
def getAppFiles(path):
	return getAppFilesRec(path,path)

appListName = 'appList.js'

appListPath = os.path.join(genDir,tmpBase,appListName)
appListAbsPath = os.path.join(sconsBasePath,appListPath)

appList = open(appListAbsPath,'w')
if len(dirsMap.keys()) > 2:
	appList.write('var appList = new Array();\n')
	appsCount = 0
	for dir in dirsMap.keys():
		if dir != 'welcome' and dir != httpCodesDir:
			subFiles = getAppFiles(os.path.join(sconsBasePath,appBase,dir))
			for subDir in map(lambda x: os.path.dirname(x),filter(lambda x: x == 'index.html' or x.endswith('/index.html'),subFiles)):
				appsCount += 1
				if subDir != '':
					appList.write('appList[\"' + os.path.join(dirsMap[dir],subDir) + '\"] = \"' + os.path.join(dir,subDir) + '/\"\n')
				else:
					appList.write('appList[\"' + dirsMap[dir] + '\"] = \"' + dir + '/\"\n')
	if appsCount > 1:
		appList.write('var appTitle = \"' + target.capitalize() + ' applications examples :\";\n')
	elif appsCount > 0:
		appList.write('var appTitle = \"' + target.capitalize() + ' application example :\";\n')
	else:
		appList.write('var appTitle = \"\";\n')
else:
	appList.write('var appTitle = \"\";\n')
appList.close()

ret = {appListPath: os.path.join(dirsMap['welcome'],appListName)}
Return('ret')
